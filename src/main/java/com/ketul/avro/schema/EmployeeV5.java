/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ketul.avro.schema;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** This is Avro schema for Employee */
@org.apache.avro.specific.AvroGenerated
public class EmployeeV5 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4996893252758175314L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EmployeeV5\",\"namespace\":\"com.ketul.avro.schema\",\"doc\":\"This is Avro schema for Employee\",\"fields\":[{\"name\":\"employee_id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Employee Id\"},{\"name\":\"fist_name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"First name of the employee\"},{\"name\":\"last_name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Last name of the employee\"},{\"name\":\"age\",\"type\":\"int\",\"doc\":\"Age of the employee\"},{\"name\":\"salary\",\"type\":\"float\",\"doc\":\"Salary\"},{\"name\":\"department\",\"type\":{\"type\":\"enum\",\"name\":\"Department\",\"symbols\":[\"COMPUTER\",\"MECHANICAL\",\"ELECTRICAL\"]},\"doc\":\"Employee department\"},{\"name\":\"hobbies\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":[]},\"doc\":\"Employee hobbies\"},{\"name\":\"sex\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Employee's sex\",\"default\":null},{\"name\":\"secret_questions\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\",\"default\":{}},\"doc\":\"Employee secret questions\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EmployeeV5> ENCODER =
      new BinaryMessageEncoder<EmployeeV5>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EmployeeV5> DECODER =
      new BinaryMessageDecoder<EmployeeV5>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<EmployeeV5> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<EmployeeV5> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<EmployeeV5> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EmployeeV5>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this EmployeeV5 to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a EmployeeV5 from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a EmployeeV5 instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static EmployeeV5 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Employee Id */
   private java.lang.String employee_id;
  /** First name of the employee */
   private java.lang.String fist_name;
  /** Last name of the employee */
   private java.lang.String last_name;
  /** Age of the employee */
   private int age;
  /** Salary */
   private float salary;
  /** Employee department */
   private com.ketul.avro.schema.Department department;
  /** Employee hobbies */
   private java.util.List<java.lang.String> hobbies;
  /** Employee's sex */
   private java.lang.String sex;
  /** Employee secret questions */
   private java.util.Map<java.lang.String,java.lang.String> secret_questions;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EmployeeV5() {}

  /**
   * All-args constructor.
   * @param employee_id Employee Id
   * @param fist_name First name of the employee
   * @param last_name Last name of the employee
   * @param age Age of the employee
   * @param salary Salary
   * @param department Employee department
   * @param hobbies Employee hobbies
   * @param sex Employee's sex
   * @param secret_questions Employee secret questions
   */
  public EmployeeV5(java.lang.String employee_id, java.lang.String fist_name, java.lang.String last_name, java.lang.Integer age, java.lang.Float salary, com.ketul.avro.schema.Department department, java.util.List<java.lang.String> hobbies, java.lang.String sex, java.util.Map<java.lang.String,java.lang.String> secret_questions) {
    this.employee_id = employee_id;
    this.fist_name = fist_name;
    this.last_name = last_name;
    this.age = age;
    this.salary = salary;
    this.department = department;
    this.hobbies = hobbies;
    this.sex = sex;
    this.secret_questions = secret_questions;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return employee_id;
    case 1: return fist_name;
    case 2: return last_name;
    case 3: return age;
    case 4: return salary;
    case 5: return department;
    case 6: return hobbies;
    case 7: return sex;
    case 8: return secret_questions;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: employee_id = value$ != null ? value$.toString() : null; break;
    case 1: fist_name = value$ != null ? value$.toString() : null; break;
    case 2: last_name = value$ != null ? value$.toString() : null; break;
    case 3: age = (java.lang.Integer)value$; break;
    case 4: salary = (java.lang.Float)value$; break;
    case 5: department = (com.ketul.avro.schema.Department)value$; break;
    case 6: hobbies = (java.util.List<java.lang.String>)value$; break;
    case 7: sex = value$ != null ? value$.toString() : null; break;
    case 8: secret_questions = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'employee_id' field.
   * @return Employee Id
   */
  public java.lang.String getEmployeeId() {
    return employee_id;
  }



  /**
   * Gets the value of the 'fist_name' field.
   * @return First name of the employee
   */
  public java.lang.String getFistName() {
    return fist_name;
  }



  /**
   * Gets the value of the 'last_name' field.
   * @return Last name of the employee
   */
  public java.lang.String getLastName() {
    return last_name;
  }



  /**
   * Gets the value of the 'age' field.
   * @return Age of the employee
   */
  public int getAge() {
    return age;
  }



  /**
   * Gets the value of the 'salary' field.
   * @return Salary
   */
  public float getSalary() {
    return salary;
  }



  /**
   * Gets the value of the 'department' field.
   * @return Employee department
   */
  public com.ketul.avro.schema.Department getDepartment() {
    return department;
  }



  /**
   * Gets the value of the 'hobbies' field.
   * @return Employee hobbies
   */
  public java.util.List<java.lang.String> getHobbies() {
    return hobbies;
  }



  /**
   * Gets the value of the 'sex' field.
   * @return Employee's sex
   */
  public java.lang.String getSex() {
    return sex;
  }



  /**
   * Gets the value of the 'secret_questions' field.
   * @return Employee secret questions
   */
  public java.util.Map<java.lang.String,java.lang.String> getSecretQuestions() {
    return secret_questions;
  }



  /**
   * Creates a new EmployeeV5 RecordBuilder.
   * @return A new EmployeeV5 RecordBuilder
   */
  public static com.ketul.avro.schema.EmployeeV5.Builder newBuilder() {
    return new com.ketul.avro.schema.EmployeeV5.Builder();
  }

  /**
   * Creates a new EmployeeV5 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EmployeeV5 RecordBuilder
   */
  public static com.ketul.avro.schema.EmployeeV5.Builder newBuilder(com.ketul.avro.schema.EmployeeV5.Builder other) {
    if (other == null) {
      return new com.ketul.avro.schema.EmployeeV5.Builder();
    } else {
      return new com.ketul.avro.schema.EmployeeV5.Builder(other);
    }
  }

  /**
   * Creates a new EmployeeV5 RecordBuilder by copying an existing EmployeeV5 instance.
   * @param other The existing instance to copy.
   * @return A new EmployeeV5 RecordBuilder
   */
  public static com.ketul.avro.schema.EmployeeV5.Builder newBuilder(com.ketul.avro.schema.EmployeeV5 other) {
    if (other == null) {
      return new com.ketul.avro.schema.EmployeeV5.Builder();
    } else {
      return new com.ketul.avro.schema.EmployeeV5.Builder(other);
    }
  }

  /**
   * RecordBuilder for EmployeeV5 instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EmployeeV5>
    implements org.apache.avro.data.RecordBuilder<EmployeeV5> {

    /** Employee Id */
    private java.lang.String employee_id;
    /** First name of the employee */
    private java.lang.String fist_name;
    /** Last name of the employee */
    private java.lang.String last_name;
    /** Age of the employee */
    private int age;
    /** Salary */
    private float salary;
    /** Employee department */
    private com.ketul.avro.schema.Department department;
    /** Employee hobbies */
    private java.util.List<java.lang.String> hobbies;
    /** Employee's sex */
    private java.lang.String sex;
    /** Employee secret questions */
    private java.util.Map<java.lang.String,java.lang.String> secret_questions;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.ketul.avro.schema.EmployeeV5.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.employee_id)) {
        this.employee_id = data().deepCopy(fields()[0].schema(), other.employee_id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.fist_name)) {
        this.fist_name = data().deepCopy(fields()[1].schema(), other.fist_name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.last_name)) {
        this.last_name = data().deepCopy(fields()[2].schema(), other.last_name);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.age)) {
        this.age = data().deepCopy(fields()[3].schema(), other.age);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.salary)) {
        this.salary = data().deepCopy(fields()[4].schema(), other.salary);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.department)) {
        this.department = data().deepCopy(fields()[5].schema(), other.department);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.hobbies)) {
        this.hobbies = data().deepCopy(fields()[6].schema(), other.hobbies);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.sex)) {
        this.sex = data().deepCopy(fields()[7].schema(), other.sex);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.secret_questions)) {
        this.secret_questions = data().deepCopy(fields()[8].schema(), other.secret_questions);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing EmployeeV5 instance
     * @param other The existing instance to copy.
     */
    private Builder(com.ketul.avro.schema.EmployeeV5 other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.employee_id)) {
        this.employee_id = data().deepCopy(fields()[0].schema(), other.employee_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fist_name)) {
        this.fist_name = data().deepCopy(fields()[1].schema(), other.fist_name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.last_name)) {
        this.last_name = data().deepCopy(fields()[2].schema(), other.last_name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.age)) {
        this.age = data().deepCopy(fields()[3].schema(), other.age);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.salary)) {
        this.salary = data().deepCopy(fields()[4].schema(), other.salary);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.department)) {
        this.department = data().deepCopy(fields()[5].schema(), other.department);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.hobbies)) {
        this.hobbies = data().deepCopy(fields()[6].schema(), other.hobbies);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.sex)) {
        this.sex = data().deepCopy(fields()[7].schema(), other.sex);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.secret_questions)) {
        this.secret_questions = data().deepCopy(fields()[8].schema(), other.secret_questions);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'employee_id' field.
      * Employee Id
      * @return The value.
      */
    public java.lang.String getEmployeeId() {
      return employee_id;
    }


    /**
      * Sets the value of the 'employee_id' field.
      * Employee Id
      * @param value The value of 'employee_id'.
      * @return This builder.
      */
    public com.ketul.avro.schema.EmployeeV5.Builder setEmployeeId(java.lang.String value) {
      validate(fields()[0], value);
      this.employee_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'employee_id' field has been set.
      * Employee Id
      * @return True if the 'employee_id' field has been set, false otherwise.
      */
    public boolean hasEmployeeId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'employee_id' field.
      * Employee Id
      * @return This builder.
      */
    public com.ketul.avro.schema.EmployeeV5.Builder clearEmployeeId() {
      employee_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'fist_name' field.
      * First name of the employee
      * @return The value.
      */
    public java.lang.String getFistName() {
      return fist_name;
    }


    /**
      * Sets the value of the 'fist_name' field.
      * First name of the employee
      * @param value The value of 'fist_name'.
      * @return This builder.
      */
    public com.ketul.avro.schema.EmployeeV5.Builder setFistName(java.lang.String value) {
      validate(fields()[1], value);
      this.fist_name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'fist_name' field has been set.
      * First name of the employee
      * @return True if the 'fist_name' field has been set, false otherwise.
      */
    public boolean hasFistName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'fist_name' field.
      * First name of the employee
      * @return This builder.
      */
    public com.ketul.avro.schema.EmployeeV5.Builder clearFistName() {
      fist_name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'last_name' field.
      * Last name of the employee
      * @return The value.
      */
    public java.lang.String getLastName() {
      return last_name;
    }


    /**
      * Sets the value of the 'last_name' field.
      * Last name of the employee
      * @param value The value of 'last_name'.
      * @return This builder.
      */
    public com.ketul.avro.schema.EmployeeV5.Builder setLastName(java.lang.String value) {
      validate(fields()[2], value);
      this.last_name = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'last_name' field has been set.
      * Last name of the employee
      * @return True if the 'last_name' field has been set, false otherwise.
      */
    public boolean hasLastName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'last_name' field.
      * Last name of the employee
      * @return This builder.
      */
    public com.ketul.avro.schema.EmployeeV5.Builder clearLastName() {
      last_name = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'age' field.
      * Age of the employee
      * @return The value.
      */
    public int getAge() {
      return age;
    }


    /**
      * Sets the value of the 'age' field.
      * Age of the employee
      * @param value The value of 'age'.
      * @return This builder.
      */
    public com.ketul.avro.schema.EmployeeV5.Builder setAge(int value) {
      validate(fields()[3], value);
      this.age = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'age' field has been set.
      * Age of the employee
      * @return True if the 'age' field has been set, false otherwise.
      */
    public boolean hasAge() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'age' field.
      * Age of the employee
      * @return This builder.
      */
    public com.ketul.avro.schema.EmployeeV5.Builder clearAge() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'salary' field.
      * Salary
      * @return The value.
      */
    public float getSalary() {
      return salary;
    }


    /**
      * Sets the value of the 'salary' field.
      * Salary
      * @param value The value of 'salary'.
      * @return This builder.
      */
    public com.ketul.avro.schema.EmployeeV5.Builder setSalary(float value) {
      validate(fields()[4], value);
      this.salary = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'salary' field has been set.
      * Salary
      * @return True if the 'salary' field has been set, false otherwise.
      */
    public boolean hasSalary() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'salary' field.
      * Salary
      * @return This builder.
      */
    public com.ketul.avro.schema.EmployeeV5.Builder clearSalary() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'department' field.
      * Employee department
      * @return The value.
      */
    public com.ketul.avro.schema.Department getDepartment() {
      return department;
    }


    /**
      * Sets the value of the 'department' field.
      * Employee department
      * @param value The value of 'department'.
      * @return This builder.
      */
    public com.ketul.avro.schema.EmployeeV5.Builder setDepartment(com.ketul.avro.schema.Department value) {
      validate(fields()[5], value);
      this.department = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'department' field has been set.
      * Employee department
      * @return True if the 'department' field has been set, false otherwise.
      */
    public boolean hasDepartment() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'department' field.
      * Employee department
      * @return This builder.
      */
    public com.ketul.avro.schema.EmployeeV5.Builder clearDepartment() {
      department = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'hobbies' field.
      * Employee hobbies
      * @return The value.
      */
    public java.util.List<java.lang.String> getHobbies() {
      return hobbies;
    }


    /**
      * Sets the value of the 'hobbies' field.
      * Employee hobbies
      * @param value The value of 'hobbies'.
      * @return This builder.
      */
    public com.ketul.avro.schema.EmployeeV5.Builder setHobbies(java.util.List<java.lang.String> value) {
      validate(fields()[6], value);
      this.hobbies = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'hobbies' field has been set.
      * Employee hobbies
      * @return True if the 'hobbies' field has been set, false otherwise.
      */
    public boolean hasHobbies() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'hobbies' field.
      * Employee hobbies
      * @return This builder.
      */
    public com.ketul.avro.schema.EmployeeV5.Builder clearHobbies() {
      hobbies = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'sex' field.
      * Employee's sex
      * @return The value.
      */
    public java.lang.String getSex() {
      return sex;
    }


    /**
      * Sets the value of the 'sex' field.
      * Employee's sex
      * @param value The value of 'sex'.
      * @return This builder.
      */
    public com.ketul.avro.schema.EmployeeV5.Builder setSex(java.lang.String value) {
      validate(fields()[7], value);
      this.sex = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'sex' field has been set.
      * Employee's sex
      * @return True if the 'sex' field has been set, false otherwise.
      */
    public boolean hasSex() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'sex' field.
      * Employee's sex
      * @return This builder.
      */
    public com.ketul.avro.schema.EmployeeV5.Builder clearSex() {
      sex = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'secret_questions' field.
      * Employee secret questions
      * @return The value.
      */
    public java.util.Map<java.lang.String,java.lang.String> getSecretQuestions() {
      return secret_questions;
    }


    /**
      * Sets the value of the 'secret_questions' field.
      * Employee secret questions
      * @param value The value of 'secret_questions'.
      * @return This builder.
      */
    public com.ketul.avro.schema.EmployeeV5.Builder setSecretQuestions(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[8], value);
      this.secret_questions = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'secret_questions' field has been set.
      * Employee secret questions
      * @return True if the 'secret_questions' field has been set, false otherwise.
      */
    public boolean hasSecretQuestions() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'secret_questions' field.
      * Employee secret questions
      * @return This builder.
      */
    public com.ketul.avro.schema.EmployeeV5.Builder clearSecretQuestions() {
      secret_questions = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EmployeeV5 build() {
      try {
        EmployeeV5 record = new EmployeeV5();
        record.employee_id = fieldSetFlags()[0] ? this.employee_id : (java.lang.String) defaultValue(fields()[0]);
        record.fist_name = fieldSetFlags()[1] ? this.fist_name : (java.lang.String) defaultValue(fields()[1]);
        record.last_name = fieldSetFlags()[2] ? this.last_name : (java.lang.String) defaultValue(fields()[2]);
        record.age = fieldSetFlags()[3] ? this.age : (java.lang.Integer) defaultValue(fields()[3]);
        record.salary = fieldSetFlags()[4] ? this.salary : (java.lang.Float) defaultValue(fields()[4]);
        record.department = fieldSetFlags()[5] ? this.department : (com.ketul.avro.schema.Department) defaultValue(fields()[5]);
        record.hobbies = fieldSetFlags()[6] ? this.hobbies : (java.util.List<java.lang.String>) defaultValue(fields()[6]);
        record.sex = fieldSetFlags()[7] ? this.sex : (java.lang.String) defaultValue(fields()[7]);
        record.secret_questions = fieldSetFlags()[8] ? this.secret_questions : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EmployeeV5>
    WRITER$ = (org.apache.avro.io.DatumWriter<EmployeeV5>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EmployeeV5>
    READER$ = (org.apache.avro.io.DatumReader<EmployeeV5>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.employee_id);

    out.writeString(this.fist_name);

    out.writeString(this.last_name);

    out.writeInt(this.age);

    out.writeFloat(this.salary);

    out.writeEnum(this.department.ordinal());

    long size0 = this.hobbies.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.String e0: this.hobbies) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    if (this.sex == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.sex);
    }

    long size1 = this.secret_questions.size();
    out.writeMapStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (java.util.Map.Entry<java.lang.String, java.lang.String> e1: this.secret_questions.entrySet()) {
      actualSize1++;
      out.startItem();
      out.writeString(e1.getKey());
      java.lang.String v1 = e1.getValue();
      out.writeString(v1);
    }
    out.writeMapEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size1 + ", but element count was " + actualSize1 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.employee_id = in.readString();

      this.fist_name = in.readString();

      this.last_name = in.readString();

      this.age = in.readInt();

      this.salary = in.readFloat();

      this.department = com.ketul.avro.schema.Department.values()[in.readEnum()];

      long size0 = in.readArrayStart();
      java.util.List<java.lang.String> a0 = this.hobbies;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.String>((int)size0, SCHEMA$.getField("hobbies").schema());
        this.hobbies = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.String e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString();
          a0.add(e0);
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.sex = null;
      } else {
        this.sex = in.readString();
      }

      long size1 = in.readMapStart();
      java.util.Map<java.lang.String,java.lang.String> m1 = this.secret_questions; // Need fresh name due to limitation of macro system
      if (m1 == null) {
        m1 = new java.util.HashMap<java.lang.String,java.lang.String>((int)size1);
        this.secret_questions = m1;
      } else m1.clear();
      for ( ; 0 < size1; size1 = in.mapNext()) {
        for ( ; size1 != 0; size1--) {
          java.lang.String k1 = null;
          k1 = in.readString();
          java.lang.String v1 = null;
          v1 = in.readString();
          m1.put(k1, v1);
        }
      }

    } else {
      for (int i = 0; i < 9; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.employee_id = in.readString();
          break;

        case 1:
          this.fist_name = in.readString();
          break;

        case 2:
          this.last_name = in.readString();
          break;

        case 3:
          this.age = in.readInt();
          break;

        case 4:
          this.salary = in.readFloat();
          break;

        case 5:
          this.department = com.ketul.avro.schema.Department.values()[in.readEnum()];
          break;

        case 6:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.String> a0 = this.hobbies;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.String>((int)size0, SCHEMA$.getField("hobbies").schema());
            this.hobbies = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.String e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString();
              a0.add(e0);
            }
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.sex = null;
          } else {
            this.sex = in.readString();
          }
          break;

        case 8:
          long size1 = in.readMapStart();
          java.util.Map<java.lang.String,java.lang.String> m1 = this.secret_questions; // Need fresh name due to limitation of macro system
          if (m1 == null) {
            m1 = new java.util.HashMap<java.lang.String,java.lang.String>((int)size1);
            this.secret_questions = m1;
          } else m1.clear();
          for ( ; 0 < size1; size1 = in.mapNext()) {
            for ( ; size1 != 0; size1--) {
              java.lang.String k1 = null;
              k1 = in.readString();
              java.lang.String v1 = null;
              v1 = in.readString();
              m1.put(k1, v1);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










